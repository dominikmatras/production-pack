services:
  database:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '${PORT_DATABASE_SERVICE}:${PORT_DATABASE_SERVICE}'
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [backend-net]

  user-service:
    build: ./user-service
    env_file: ./.env
    ports:
      - '${PORT_USER_SERVICE}:${PORT_USER_SERVICE}'
    depends_on:
      - database
    networks: [backend-net]

  order-service:
    build: ./order-service
    env_file: ./.env
    ports:
      - '${PORT_ORDER_SERVICE}:${PORT_ORDER_SERVICE}'
    command: >
      sh -c "
      npx prisma migrate deploy &&
      npm run start
      "
    depends_on:
      - database
    networks: [backend-net]

  production-service:
    build: ./production-service
    env_file: ./.env
    ports:
      - '${PORT_PRODUCTION_SERVICE}:${PORT_PRODUCTION_SERVICE}'
    command: >
      sh -c "
      npx prisma migrate deploy &&
      npm run start
      "
    depends_on:
      - database
      - order-service
    networks: [backend-net]

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - '8080:8080'
    depends_on:
      - user-service
      - order-service
      - production-service
    networks:
      - backend-net

  # frontend:
  #   build:
  #     context: ./../frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   environment:
  #     # tu wskaż publiczny adres gatewaya z punktu widzenia PRZEGLĄDARKI
  #     # jeśli odpalasz lokalnie: http://localhost:8080
  #     ENV_API_BASE_URL: http://localhost:8080
  #   ports:
  #     - '3000:80'
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - backend-net

volumes:
  pgdata:

networks:
  backend-net:
    driver: bridge
